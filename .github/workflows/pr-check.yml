name: PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    name: Validate PR
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check commit messages
      run: |
        # Validate commit messages follow conventional commits
        commits=$(git log --format=%s origin/main..HEAD)
        while IFS= read -r commit; do
          if ! echo "$commit" | grep -qE '^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+'; then
            echo "Invalid commit message: $commit"
            echo "Please use conventional commits format: type(scope): description"
            exit 1
          fi
        done <<< "$commits"
        
  size-check:
    runs-on: ubuntu-latest
    name: PR Size Check
    
    steps:
    - name: Check PR size
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          const { additions, deletions } = pr;
          const totalChanges = additions + deletions;
          
          if (totalChanges > 1000) {
            core.setFailed(`PR is too large: ${totalChanges} changes. Consider breaking it into smaller PRs.`);
          }
          
          // Add size label
          let label = 'size/XS';
          if (totalChanges > 500) label = 'size/L';
          else if (totalChanges > 200) label = 'size/M';
          else if (totalChanges > 50) label = 'size/S';
          
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number,
            labels: [label]
          });
          
  dependency-review:
    runs-on: ubuntu-latest
    name: Dependency Review
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        
  terraform-check:
    runs-on: ubuntu-latest
    name: Terraform Validation
    if: contains(github.event.pull_request.files.*.filename, 'terraform')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.7.0'
        
    - name: Terraform Format Check
      run: |
        cd infrastructure/terraform
        terraform fmt -check -recursive
        
    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init -backend=false
        
    - name: Terraform Validate
      run: |
        cd infrastructure/terraform
        terraform validate
        
    - name: Terraform Plan
      env:
        TF_VAR_jwt_secret: "dummy-secret-for-validation"
        TF_VAR_openweathermap_api_key: "dummy-key-for-validation"
      run: |
        cd infrastructure/terraform
        terraform plan -var-file="environments/dev.tfvars" -no-color